
-- üîÅ –£–õ–¨–¢–†–ê-–ê–í–¢–û–§–ê–†–ú: –° –æ—Ç–ª–∞–¥–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ç–æ—Ä–æ–≥–æ beehive

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local gui = player:WaitForChild("PlayerGui")
local cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")
local entityFolder = workspace:WaitForChild("Map"):WaitForChild("Entities")

local restarting = false

local function parseCash(val)
    val = tostring(val or "0"):gsub(",", "")
    if val:lower():find("k") then
        return tonumber(val:lower():gsub("k", "")) * 1000
    end
    return tonumber(val) or 0
end

local function waitForCash(amount)
    repeat task.wait(0.1) until parseCash(cash.Value) >= amount or restarting
end

local function placeUnit(unitName, pos)
    local before = {}
    for _, v in pairs(entityFolder:GetChildren()) do before[v] = true end

    local cf = CFrame.new(pos) * CFrame.Angles(0, math.rad(180), 0)
    ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(unitName, {
        Valid = true, Position = pos, CF = cf, Rotation = 180
    })
    print("üì¶ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —é–Ω–∏—Ç–∞:", unitName)

    for i = 1, 100 do
        task.wait(0.1)
        for _, v in pairs(entityFolder:GetChildren()) do
            if not before[v] and v:IsA("Model") and v:GetAttribute("ID") then
                print("‚úÖ –Æ–Ω–∏—Ç –ø–æ—è–≤–∏–ª—Å—è –∏ –ø–æ–ª—É—á–∏–ª ID:", unitName, v:GetAttribute("ID"))
                return v:GetAttribute("ID")
            end
        end
    end
    print("‚ùå –Æ–Ω–∏—Ç –ù–ï –ø–æ–ª—É—á–∏–ª ID:", unitName)
end

local function upgradeAtCash(id, upgrades)
    for _, cost in ipairs(upgrades) do
        waitForCash(cost)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id)
        print("‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥:", id, "–∑–∞", cost)
    end
end

local function safePlaceAndUpgrade(name, pos, steps)
    waitForCash(steps[1] or 1000)
    if restarting then return end
    print("üöß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–Ω–∏—Ç–∞:", name)
    local id = placeUnit(name, pos)
    if id and steps and #steps > 0 then
        upgradeAtCash(id, steps)
    elseif not id then
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: —é–Ω–∏—Ç –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω:", name)
    end
end

local function voteInsane()
    task.spawn(function()
        while true do
            task.wait(0.1)
            local ui = gui:FindFirstChild("GameGui")
            and gui.GameGui.Screen
            and gui.GameGui.Screen.Middle
            and gui.GameGui.Screen.Middle:FindFirstChild("DifficultyVote")
            if ui and ui.Visible then
                ReplicatedStorage.RemoteFunctions.PlaceDifficultyVote:InvokeServer("dif_insane")
                print("üéØ –í—ã–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: Insane")
                break
            end
        end
    end)
end

task.spawn(function()
    while true do
        task.wait(0.1)
        local btn = gui:FindFirstChild("GameGui")
        and gui.GameGui.Screen
        and gui.GameGui.Screen.Middle
        and gui.GameGui.Screen.Middle:FindFirstChild("GameEnd")
        and gui.GameGui.Screen.Middle.GameEnd.Items
        and gui.GameGui.Screen.Middle.GameEnd.Items.Frame
        and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions
        and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items
        and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items:FindFirstChild("Again")
        if btn and btn.Visible then
            restarting = true
            print("üîÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
        end
    end
end)

local function run()
    task.wait(0.1)
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
    voteInsane()
    restarting = false

    -- –§–µ—Ä–º–µ—Ä—ã
    safePlaceAndUpgrade("unit_farmer_npc", Vector3.new(-332.14, 63.38, -77.40), {250, 350, 500})
    safePlaceAndUpgrade("unit_farmer_npc", Vector3.new(-338.47, 63.38, -77.79), {250, 350, 500})
    safePlaceAndUpgrade("unit_farmer_npc", Vector3.new(-338.30, 63.38, -83.23), {250, 350, 500})

    -- Beehive
    waitForCash(2500)
    if restarting then return end
    print("‚û°Ô∏è –°—Ç–∞–≤–∏–º –ø–µ—Ä–≤–æ–≥–æ Beehive")
    placeUnit("unit_beehive", Vector3.new(-330.08, 63.46, -99.32))

    print("‚û°Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ Beehive —Å –∞–ø–≥—Ä–µ–π–¥–æ–º")
    safePlaceAndUpgrade("unit_beehive", Vector3.new(-323.65, 63.46, -98.40), {1500, 4000, 10000, 25000})

    safePlaceAndUpgrade("unit_beehive", Vector3.new(-324.86, 63.46, -91.45), {1500, 4000, 10000, 25000})

    local pulse = {3000, 7500, 10000, 25000}
    safePlaceAndUpgrade("unit_pulse_plant", Vector3.new(-325.80, 63.94, -78.21), pulse)
    safePlaceAndUpgrade("unit_pulse_plant", Vector3.new(-328.13, 63.94, -85.03), pulse)
    safePlaceAndUpgrade("unit_pulse_plant", Vector3.new(-340.26, 63.94, -88.00), pulse)

    while not restarting do task.wait(0.5) end
end

while true do run() end
