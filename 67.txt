local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local entityFolder = workspace:WaitForChild("Map"):WaitForChild("Entities")
local cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")

local restarting = false
local restartRequested = false

-- üí∏ –ß—Ç–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (cash)
local function parseCash(val)
    if not val then return 0 end
    val = tostring(val):gsub(",", "")
    if val:lower():find("k") then
        return tonumber(val:lower():gsub("k", "")) * 1000
    end
    return tonumber(val) or 0
end

-- ‚è≥ –ñ–¥–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥
local function waitForCash(amount)
    repeat wait(0.2) until parseCash(cash.Value) >= amount or restarting
end

-- üß± –ü–æ—Å—Ç–∞–≤–∏—Ç—å —é–Ω–∏—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å ID
local function placeUnitAndGetId(unitName, position)
    local before = {}
    for _, v in pairs(entityFolder:GetChildren()) do before[v] = true end

    local cf = CFrame.new(position) * CFrame.Angles(0, math.rad(180), 0)
    ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(unitName, {
        Valid = true,
        Position = position,
        CF = cf,
        Rotation = 180
    })

    for _ = 1, 50 do
        wait(0.1)
        for _, v in pairs(entityFolder:GetChildren()) do
            if not before[v] and v:IsA("Model") and v:GetAttribute("ID") then
                print("‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω:", unitName)
                return v:GetAttribute("ID")
            end
        end
    end

    warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω:", unitName)
    return nil
end

-- ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ —é–Ω–∏—Ç–∞
local function upgradeAtCash(unitId, steps)
    for _, cost in ipairs(steps) do
        waitForCash(cost)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(unitId)
        print("‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥:", unitId, "–∑–∞", cost)
    end
end

-- üéØ –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
local function autoVoteDifficulty(mode)
    local diff = {
        Easy = "dif_easy",
        Normal = "dif_normal",
        Hard = "dif_hard",
        Insane = "dif_insane",
        Impossible = "dif_impossible"
    }[mode or "Insane"] or "dif_insane"

    local gui = player:WaitForChild("PlayerGui")
    local voteUI = gui:WaitForChild("GameGui"):WaitForChild("Screen")
        :WaitForChild("Middle"):WaitForChild("DifficultyVote")

    task.spawn(function()
        while true do
            wait(0.2)
            if voteUI.Visible then
                print("üéØ –ì–æ–ª–æ—Å—É–µ–º:", diff)
                pcall(function()
                    ReplicatedStorage.RemoteFunctions.PlaceDifficultyVote:InvokeServer(diff)
                end)
                break
            end
        end
    end)
end

-- üõë –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Play Again
local function waitForPlayAgain()
    local gui = player:WaitForChild("PlayerGui")
    local btn
    repeat
        wait(1)
        btn = gui:FindFirstChild("GameGui")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items:FindFirstChild("Again")
    until btn and btn.Visible
    print("üîÅ –ö–Ω–æ–ø–∫–∞ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞")
    restartRequested = true
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
end

-- ‚öîÔ∏è –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–π –∫–∞—Ç–∫–∏
local function runMatch()
    print("üöÄ –ù–∞—á–∞–ª–æ –∫–∞—Ç–∫–∏...")
    restartRequested = false
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
    autoVoteDifficulty("Insane")
    wait(1)

    -- 1-3 –§–µ—Ä–º–µ—Ä—ã
    waitForCash(200)
    local id1 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-332.14, 63.38, -77.40))
    if id1 then upgradeAtCash(id1, {250, 350, 500}) end

    waitForCash(200)
    local id2 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-338.47, 63.38, -77.79))
    if id2 then upgradeAtCash(id2, {250, 350, 500}) end

    waitForCash(200)
    local id3 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-338.30, 63.38, -83.23))
    if id3 then upgradeAtCash(id3, {250, 350, 500}) end

    -- 4 (–±–µ–∑ –∞–ø–≥—Ä–µ–π–¥–∞)
    waitForCash(2500)
    placeUnitAndGetId("unit_beehive", Vector3.new(-330.08, 63.46, -99.32))

    -- 5 –∏ 6 beehive
    waitForCash(2500)
    local id5 = placeUnitAndGetId("unit_beehive", Vector3.new(-323.65, 63.46, -98.40))
    if id5 then upgradeAtCash(id5, {1500, 4000, 10000, 25000}) end

    waitForCash(2500)
    local id6 = placeUnitAndGetId("unit_beehive", Vector3.new(-324.86, 63.46, -91.45))
    if id6 then upgradeAtCash(id6, {1500, 4000, 10000, 25000}) end

    -- 7-9 pulse plant
    local pulseSteps = {3000, 7500, 10000, 25000}

    waitForCash(5000)
    local id7 = placeUnitAndGetId("unit_pulse_plant", Vector3.new(-325.80, 63.94, -78.21))
    if id7 then upgradeAtCash(id7, pulseSteps) end

    waitForCash(5000)
    local id8 = placeUnitAndGetId("unit_pulse_plant", Vector3.new(-328.13, 63.94, -85.03))
    if id8 then upgradeAtCash(id8, pulseSteps) end

    waitForCash(5000)
    local id9 = placeUnitAndGetId("unit_pulse_plant", Vector3.new(-340.26, 63.94, -88.00))
    if id9 then upgradeAtCash(id9, pulseSteps) end

    -- üí§ –ñ–¥—ë–º —Ä–µ—Å—Ç–∞—Ä—Ç
    waitForPlayAgain()
end

-- üîÅ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
while true do
    runMatch()
end
