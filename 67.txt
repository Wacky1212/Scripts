local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local entityFolder = workspace:WaitForChild("Map"):WaitForChild("Entities")
local cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")

local restarting = false
local autoSkipEnabled = false

local function parseCash(val)
    if not val then return 0 end
    val = tostring(val):gsub(",", "")
    if val:lower():find("k") then
        local num = tonumber(val:lower():gsub("k", ""))
        return (num or 0) * 1000
    end
    return tonumber(val) or 0
end

local function waitForCash(amount)
    repeat wait(0.2) until parseCash(cash.Value) >= amount or restarting
end

local function placeUnitAndGetId(unitName, position)
    local before = {}
    for _, v in pairs(entityFolder:GetChildren()) do before[v] = true end

    local cf = CFrame.new(position) * CFrame.Angles(0, math.rad(180), 0)
    ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(unitName, {
        Valid = true,
        Position = position,
        CF = cf,
        Rotation = 180
    })

    for _ = 1, 50 do
        wait(0.1)
        for _, v in pairs(entityFolder:GetChildren()) do
            if not before[v] and v:IsA("Model") and v:GetAttribute("ID") then
                return v:GetAttribute("ID")
            end
        end
    end
    return nil
end

local function upgradeAtCash(unitId, upgradeSteps, onStep)
    for i, cost in ipairs(upgradeSteps) do
        waitForCash(cost)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(unitId)
        if onStep then onStep(i) end
    end
end

local function autoVoteDifficulty(mode)
    local arg = ({
        Easy = "dif_easy",
        Normal = "dif_normal",
        Hard = "dif_hard",
        Insane = "dif_insane",
        Impossible = "dif_impossible"
    })[mode or "Insane"] or "dif_insane"

    local gui = player:WaitForChild("PlayerGui")

    task.spawn(function()
        while true do
            wait(0.1)
            local voteUI = gui:FindFirstChild("GameGui")
                and gui.GameGui:FindFirstChild("Screen")
                and gui.GameGui.Screen:FindFirstChild("Middle")
                and gui.GameGui.Screen.Middle:FindFirstChild("DifficultyVote")
            if voteUI and voteUI.Visible then
                ReplicatedStorage.RemoteFunctions.PlaceDifficultyVote:InvokeServer(arg)
                break
            end
        end
    end)
end

task.spawn(function()
    local gui = player:WaitForChild("PlayerGui")
    while true do
        wait(0.2)
        local btn = gui:FindFirstChild("GameGui")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items:FindFirstChild("Again")

        if btn and btn.Visible then
            restarting = true
            autoSkipEnabled = false
            ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
        end
    end
end)

task.spawn(function()
    while true do
        wait(0.2)
        if autoSkipEnabled and not restarting then
            ReplicatedStorage.RemoteFunctions.SkipWave:InvokeServer("y")
        end
    end
end)

local function teleportToStart()
    local root = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    if root then
        root.CFrame = CFrame.new(-80.8577651977539, -29.522750854492188, 215.46897888183594)
    end
end

local function runMatch()
    wait(1)
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
    autoVoteDifficulty("Impossible")
    wait(1)
    teleportToStart()
    restarting = false

    waitForCash(300)
    if restarting then return end
    placeUnitAndGetId("unit_money_tree", Vector3.new(-99.56, -27.89, 198.44))

    waitForCash(200)
    if restarting then return end
    local beet1 = placeUnitAndGetId("unit_electric_beetroot", Vector3.new(-92.68, -29.52, 225.88))
    if beet1 then upgradeAtCash(beet1, {250, 500, 750}) end

    waitForCash(200)
    if restarting then return end
    local beet2 = placeUnitAndGetId("unit_electric_beetroot", Vector3.new(-69.74, -29.52, 226.14))
    if beet2 then upgradeAtCash(beet2, {250, 500, 750}) end

    -- Beehive 1 (–≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫–∏–ø –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞)
    waitForCash(2500)
    if restarting then return end
    local b1 = placeUnitAndGetId("unit_beehive", Vector3.new(-91.53, -28.91, 210.04))
    if b1 then
        upgradeAtCash(b1, {1500, 4000, 10000, 25000}, function(step)
            if step == 1 then autoSkipEnabled = true end
        end)
    end

    -- Beehive 2
    wait(1)
    waitForCash(2500)
    if restarting then return end
    local b2 = placeUnitAndGetId("unit_beehive", Vector3.new(-86.21, -28.91, 205.25))
    if b2 then upgradeAtCash(b2, {1500, 4000, 10000, 25000}) end

    -- Beehive 3
    wait(1)
    waitForCash(2500)
    if restarting then return end
    local b3 = placeUnitAndGetId("unit_beehive", Vector3.new(-86.94, -28.91, 190.88))
    if b3 then upgradeAtCash(b3, {1500, 4000, 10000, 25000}) end

    -- üçÑ Big Mushrooms
    local mushUpgrades = {6000, 7500, 12500, 20000}

    waitForCash(3000)
    if restarting then return end
    local m1 = placeUnitAndGetId("unit_big_mushroom", Vector3.new(-70.84, -27.52, 207.98))
    if m1 then upgradeAtCash(m1, mushUpgrades) end

    waitForCash(3000)
    if restarting then return end
    local m2 = placeUnitAndGetId("unit_big_mushroom", Vector3.new(-76.71, -27.52, 212.71))
    if m2 then upgradeAtCash(m2, mushUpgrades) end

    waitForCash(3000)
    if restarting then return end
    local m3 = placeUnitAndGetId("unit_big_mushroom", Vector3.new(-83.44, -27.52, 205.47))
    if m3 then upgradeAtCash(m3, mushUpgrades) end

    waitForCash(3000)
    if restarting then return end
    local m4 = placeUnitAndGetId("unit_big_mushroom", Vector3.new(-68.76, -27.52, 216.41))
    if m4 then upgradeAtCash(m4, mushUpgrades) end

    while not restarting do wait(1) end
end

while true do
    runMatch()
end
