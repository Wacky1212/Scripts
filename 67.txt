-- ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local entityFolder = workspace:WaitForChild("Map"):WaitForChild("Entities")
local cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")
local restarting = false
local autoSkip = false

-- üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
local function parseCash(val)
    if not val then return 0 end
    val = tostring(val):gsub(",", "")
    if val:lower():find("k") then
        local num = tonumber(val:lower():gsub("k", ""))
        return (num or 0) * 1000
    end
    return tonumber(val) or 0
end

-- üíµ –û–∂–∏–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã
local function waitForCash(amount)
    repeat wait(0.1) until parseCash(cash.Value) >= amount or restarting
end

-- üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–Ω–∏—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ ID
local function placeUnitAndGetId(unitName, position)
    local before = {}
    for _, v in pairs(entityFolder:GetChildren()) do before[v] = true end

    local cf = CFrame.new(position) * CFrame.Angles(0, math.rad(180), 0)
    ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(unitName, {
        Valid = true,
        Position = position,
        CF = cf,
        Rotation = 180
    })

    for _ = 1, 50 do
        wait(0.1)
        for _, v in pairs(entityFolder:GetChildren()) do
            if not before[v] and v:IsA("Model") and v:GetAttribute("ID") then
                return v:GetAttribute("ID")
            end
        end
    end

    return nil
end

-- ‚¨ÜÔ∏è –ê–ø–≥—Ä–µ–π–¥ —é–Ω–∏—Ç–∞
local function upgradeAtCash(unitId, upgrades)
    for _, cost in ipairs(upgrades) do
        waitForCash(cost)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(unitId)
    end
end

-- üìä –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
local function autoVoteDifficulty(mode)
    local map = {
        ["Easy"] = "dif_easy",
        ["Normal"] = "dif_normal",
        ["Hard"] = "dif_hard",
        ["Insane"] = "dif_insane",
        ["Impossible"] = "dif_impossible"
    }
    local arg = map[mode or "Impossible"] or "dif_impossible"
    local gui = player:WaitForChild("PlayerGui")

    task.spawn(function()
        while true do
            wait(0.1)
            local voteUI = gui:FindFirstChild("GameGui")
                and gui.GameGui:FindFirstChild("Screen")
                and gui.GameGui.Screen:FindFirstChild("Middle")
                and gui.GameGui.Screen.Middle:FindFirstChild("DifficultyVote")
            if voteUI and voteUI.Visible then
                ReplicatedStorage.RemoteFunctions.PlaceDifficultyVote:InvokeServer(arg)
                break
            end
        end
    end)
end

-- üåÄ –ê–≤—Ç–æ—Å–∫–∏–ø –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞
task.spawn(function()
    while true do
        wait(0.1)
        if autoSkip and not restarting then
            pcall(function()
                ReplicatedStorage.RemoteFunctions.SkipWave:InvokeServer("y")
            end)
        end
    end
end)

-- üîÅ –†–µ—Å—Ç–∞—Ä—Ç
task.spawn(function()
    local gui = player:WaitForChild("PlayerGui")
    while true do
        wait(0.5)
        local btn = gui:FindFirstChild("GameGui")
            and gui.GameGui:FindFirstChild("Screen")
            and gui.GameGui.Screen:FindFirstChild("Middle")
            and gui.GameGui.Screen.Middle:FindFirstChild("GameEnd")
            and gui.GameGui.Screen.Middle.GameEnd:FindFirstChild("Items")
            and gui.GameGui.Screen.Middle.GameEnd.Items:FindFirstChild("Frame")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame:FindFirstChild("Actions")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions:FindFirstChild("Items")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items:FindFirstChild("Again")

        if btn and btn.Visible then
            restarting = true
            autoSkip = false
            ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
        end
    end
end)

-- üß† –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
local function runMatch()
    wait(1)
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
    autoVoteDifficulty("Impossible")
    wait(0.2)
    restarting = false
    autoSkip = false

    -- üîÄ –¢–µ–ª–µ–ø–æ—Ä—Ç
    player.Character:SetPrimaryPartCFrame(CFrame.new(-80.85776, -29.52275, 215.46898))

    -- üå≥ Money Tree
    waitForCash(500)
    placeUnitAndGetId("unit_money_tree", Vector3.new(-99.5573, -27.8982, 198.4464))

    -- ‚ö° 1-–π Beetroot
    waitForCash(200)
    local id1 = placeUnitAndGetId("unit_electric_beetroot", Vector3.new(-92.6838, -29.5227, 225.8845))
    if id1 then
        waitForCash(250)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
        autoSkip = true -- ‚úÖ –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å–∫–∏–ø
        waitForCash(500)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
        waitForCash(750)
        if restarting then return end
        ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
    end

    -- ‚ö° 2-–π Beetroot
    waitForCash(200)
    local id2 = placeUnitAndGetId("unit_electric_beetroot", Vector3.new(-69.7396, -29.5227, 226.1393))
    if id2 then upgradeAtCash(id2, {250, 500, 750}) end

    -- üêù Beehive x3
    waitForCash(2500)
    local id3 = placeUnitAndGetId("unit_beehive", Vector3.new(-91.5276, -28.9081, 210.0433))
    if id3 then upgradeAtCash(id3, {1500, 4000, 10000, 25000}) end

    wait(1)
    waitForCash(2500)
    local id4 = placeUnitAndGetId("unit_beehive", Vector3.new(-86.2081, -28.9081, 205.2484))
    if id4 then upgradeAtCash(id4, {1500, 4000, 10000, 25000}) end

    wait(1)
    waitForCash(2500)
    local id5 = placeUnitAndGetId("unit_beehive", Vector3.new(-86.9386, -28.9081, 190.8840))
    if id5 then upgradeAtCash(id5, {1500, 4000, 10000, 25000}) end

    -- ‚è≥ –ñ–¥—ë–º —Ä–µ—Å—Ç–∞—Ä—Ç
    while not restarting do wait(0.5) end
end

-- üöÄ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
while true do
    runMatch()
end
