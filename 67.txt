local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local entityFolder = workspace:WaitForChild("Map"):WaitForChild("Entities")
local cash = player:WaitForChild("leaderstats"):WaitForChild("Cash")

-- üí∞ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ Cash –≤ —á–∏—Å–ª–æ
local function parseCash(val)
    val = tostring(val or "0"):gsub(",", "")
    if val:lower():find("k") then
        local num = tonumber(val:lower():gsub("k", ""))
        if num then return num * 1000 end
    end
    return tonumber(val)
end

-- ‚è≥ –ñ–¥–∞—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É
local function waitForCash(amount)
    repeat wait(0.2) until parseCash(cash.Value) >= amount
end

-- üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–Ω–∏—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ ID
local function placeUnitAndGetId(unitName, position)
    local before = {}
    for _, v in pairs(entityFolder:GetChildren()) do before[v] = true end

    local cf = CFrame.new(position) * CFrame.Angles(0, math.rad(180), 0)
    ReplicatedStorage.RemoteFunctions.PlaceUnit:InvokeServer(unitName, {
        Valid = true,
        Position = position,
        CF = cf,
        Rotation = 180
    })

    for _ = 1, 50 do
        wait(0.1)
        for _, v in pairs(entityFolder:GetChildren()) do
            if not before[v] and v:IsA("Model") and v:GetAttribute("ID") then
                print("‚úÖ –Æ–Ω–∏—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω:", unitName)
                return v:GetAttribute("ID")
            end
        end
    end

    warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —é–Ω–∏—Ç:", unitName)
    return nil
end

-- ‚ñ∂Ô∏è –û–¥–Ω–∞ –∫–∞—Ç–∫–∞
local function runMatch()
    wait(1)
    ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
    wait(1)
    ReplicatedStorage.RemoteFunctions.PlaceDifficultyVote:InvokeServer("dif_insane")
    wait(1)

    -- === 1‚Äì3: unit_farmer_npc
    waitForCash(200)
    local id1 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-332.14, 63.38, -77.40))
    if id1 then
        waitForCash(250) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
        waitForCash(350) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
        waitForCash(500) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id1)
    end

    waitForCash(200)
    local id2 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-338.47, 63.38, -77.79))
    if id2 then
        waitForCash(250) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id2)
        waitForCash(350) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id2)
        waitForCash(500) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id2)
    end

    waitForCash(200)
    local id3 = placeUnitAndGetId("unit_farmer_npc", Vector3.new(-338.30, 63.38, -83.23))
    if id3 then
        waitForCash(250) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id3)
        waitForCash(350) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id3)
        waitForCash(500) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id3)
    end

    -- === 4: unit_beehive ‚Äî 7 –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∞–ø–≥—Ä–µ–π–¥–∞
    waitForCash(2500)
    local id4 = placeUnitAndGetId("unit_beehive", Vector3.new(-330.08, 63.46, -99.32))
    if id4 then
        waitForCash(1500)
        for i = 1, 7 do
            ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id4)
            print("‚¨ÜÔ∏è –ü–æ–ø—ã—Ç–∫–∞", i, "–∞–ø–≥—Ä–µ–π–¥–∞ unit_beehive –¥–æ —É—Ä–æ–≤–Ω—è 1")
            wait(1)
        end
        waitForCash(4000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id4)
        waitForCash(10000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id4)
        waitForCash(25000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id4)
    end

    -- === 5: unit_beehive
    waitForCash(2500)
    local id5 = placeUnitAndGetId("unit_beehive", Vector3.new(-323.65, 63.46, -98.40))
    if id5 then
        waitForCash(1500) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id5)
        waitForCash(4000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id5)
        waitForCash(10000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id5)
        waitForCash(25000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id5)
    end

    -- === 6: unit_beehive
    waitForCash(2500)
    local id6 = placeUnitAndGetId("unit_beehive", Vector3.new(-324.86, 63.46, -91.45))
    if id6 then
        waitForCash(1500) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id6)
        waitForCash(4000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id6)
        waitForCash(10000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id6)
        waitForCash(25000) ReplicatedStorage.RemoteFunctions.UpgradeUnit:InvokeServer(id6)
    end
end

-- üîÅ –ñ–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "Play Again" –∏ –Ω–∞–∂–∞—Ç—å
local function waitForPlayAgainButton()
    print("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Play Again...")
    local gui = player:WaitForChild("PlayerGui")
    while true do
        wait(0.5)
        local btn = gui:FindFirstChild("GameGui")
            and gui.GameGui:FindFirstChild("Screen")
            and gui.GameGui.Screen:FindFirstChild("Middle")
            and gui.GameGui.Screen.Middle:FindFirstChild("GameEnd")
            and gui.GameGui.Screen.Middle.GameEnd:FindFirstChild("Items")
            and gui.GameGui.Screen.Middle.GameEnd.Items:FindFirstChild("Frame")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame:FindFirstChild("Actions")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions:FindFirstChild("Items")
            and gui.GameGui.Screen.Middle.GameEnd.Items.Frame.Actions.Items:FindFirstChild("Again")

        if btn and btn.Visible then
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ 'Play Again' –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Ä–µ—Å—Ç–∞—Ä—Ç...")
            ReplicatedStorage.RemoteFunctions.RestartGame:InvokeServer()
            break
        end
    end
end

-- üîÅ –¶–∏–∫–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –º–∞—Ç—á–µ–π
while true do
    runMatch()
    waitForPlayAgainButton()
end
